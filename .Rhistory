for (p in plot_list) {
print(p)
}
#end pdf
dev.off()
col_names  = colnames(interest)[-1]
plot_list = list()
for(i in col_names){
plot = ggplot(df2, aes_string(x =df2$profitable,y =i,fill =df2$profitable))+geom_dotplot()+labs(x='profitable')
plot_list[[i]] = plot
}
p[4]
col_names  = colnames(interest)[-1]
plot_list = list()
for(i in col_names){
plot = ggplot(df2, aes_string(x =df2$profitable,y =i,fill =df2$profitable))+geom_dotplot()+labs(x='profitable')
plot_list[[i]] = plot
}
plot_list[4]
col_names  = colnames(interest)[-1]
plot_list = list()
for(i in col_names){
plot = ggplot(df2, aes_string(x =df2$profitable,y =i,fill =df2$profitable))+geom_dotplot(y =i)+labs(x='profitable')
plot_list[[i]] = plot
}
plot_list[4]
col_names  = colnames(interest)[-1]
plot_list = list()
for(i in col_names){
plot = ggplot(df2, aes_string(x =df2$profitable,y =i,fill =df2$profitable))+geom_boxplot()+labs(x='profitable')
plot_list[[i]] = plot
}
p[4]
col_names  = colnames(interest)[-1]
plot_list = list()
for(i in col_names){
plot = ggplot(df2, aes_string(x =df2$profitable,y =i,fill =df2$profitable))+geom_boxplot()+labs(x='profitable')
plot_list[[i]] = plot
}
plot_list[4]
col_names  = colnames(interest)[-1]
plot_list = list()
for(i in col_names){
plot = ggplot(df2, aes_string(x =df2$profitable,y =i,fill =df2$profitable))+geom_point()+labs(x='profitable')
plot_list[[i]] = plot
}
plot_list[4]
col_names  = colnames(interest)[-1]
plot_list = list()
for(i in col_names){
plot = ggplot(df2, aes_string(x =df2$profitable,y =i,fill =df2$profitable))+geom_point()+labs(x='profitable')
plot_list[[i]] = plot
}
plot_list[60]
col_names  = colnames(interest)[-1]
plot_list = list()
for(i in col_names){
plot = ggplot(df2, aes_string(x =df2$profitable,y =i,fill =df2$profitable))+geom_point()+labs(x='profitable')
plot_list[[i]] = plot
}
plot_list[69]
col_names  = colnames(interest)[-1]
plot_list = list()
for(i in col_names){
plot = ggplot(df2, aes_string(x =df2$profitable,y =i,fill =df2$profitable))+geom_point()+labs(x='profitable')
plot_list[[i]] = plot
}
plot_list[72]
col_names  = colnames(interest)[-1]
plot_list = list()
for(i in col_names){
plot = ggplot(df2, aes_string(x =df2$profitable,y =i,fill =df2$profitable))+geom_boxplot()+labs(x='profitable')
plot_list[[i]] = plot
}
plot_list[4]
length(df2$profitable)
length(df2[df2$profitable ==1,)/length(df2$profitable)
length(df2[df2$profitable ==1,])/length(df2$profitable)
length(df2[df2$profitable ==1,])/length(df2$profitable)*100
length(df2[df2$profitable ==1,])/length(df2$profitable)
length(df2[df2$profitable ==1,])/length(df2$profitable)
length(df2[df2$profitable ==0,])/length(df2$profitable)
df2[df2$profitable==1,]
df2$profitable[df2$profitable==1,]
df2[df2$profitable==1,]$profitable
length(df2[df2$profitable==1,]$profitable)
df2[df2$profitable==1,]$profitable
length(df2[df2$profitable==1,]$profitable)
length(df2$profitable)
length(df2[df2$profitable==1,]$profitable)/length(df2$profitable)
length(df2[df2$profitable==1,]$profitable)/length(df2$profitable)*100
fact_stats = function(x){
if(is.factor(x)){
perc = length(df2[df2$x==1,]$x)/length(df2$x)*100
count = length(df2$x)
v = list(perc,count)
return(v)
}
}
some = lapply(df2, FUN = fact_stats)
fact_stats = function(x){
if(is.factor(x)){
perc = length(df2[df2$x==1,]$x)/length(df2$x)*100
count = length(df2$x)
v = list(perc,count)
return(v)
}
}
some = lapply(df2$profitable, FUN = fact_stats)
fact_stats = function(x){
if(is.factor(x)){
perc = length(df2[df2$x==1,]$x)/length(df2$x)*100
count = length(df2$x)
v = list(perc,count)
return(v)
}
}
fact_stats(df2$profitable)
fact_stats = function(x){
if(is.factor(x)){
perc = length(df2[df2$x==1,]$x)/length(df2$x)*100
count = length(df2$x)
v = c(perc,count)
return(v)
}
}
fact_stats(df2$profitable)
fact_stats = function(x){
if(is.factor(x)){
perc = length(df2[df2$x==1,]$x)/length(df2$x)*100
count = length(df2$x)
v = list(perc,count)
return(v)
}
}
fact_stats(df2$profitable)
fact_stats = function(x){
if(is.factor(x)){
perc = length(df2[df2$x==1,]$x)/length(df2$x)*100
count = length(df2$x)
v = list(perc,count)
return(v)
}
}
fact_stats(list(names(df2)))
fact_stats = function(x){
if(is.factor(x)){
perc = length(df2[df2$x==1,]$x)/length(df2$x)*100
count = length(df2$x)
v = list(perc,count)
return(v)
}
}
asdf = fact_stats(list(names(df2)))
fact_stats = function(x){
if(is.factor(x)){
perc = length(df2[df2$x==1,]$x)/length(df2$x)*100
count = length(df2$x)
v = list(perc,count)
return(v)
}
}
asdf = fact_stats(list(names(df2)))
asdf
fact_stats = function(x){
if(is.factor(x)){
perc = length(df2[df2$x==1,]$x)/length(df2$x)*100
count = length(df2$x)
v = list(perc,count)
return(v)
}
}
asdf = fact_stats(list(names(df2)))
interest = list(names(df2))
#assistance: https://stackoverflow.com/questions/26034177/save-multiple-ggplots-using-a-for-loop
library(grid)
col_names  = colnames(interest)[-1]
plot_list = list()
for(i in col_names){
plot = ggplot(df2, aes_string(x =df2$profitable,y =i,fill =df2$profitable))+geom_boxplot()+labs(x='profitable')
plot_list[[i]] = plot
}
plot_list[4]
knitr::opts_chunk$set(echo = TRUE)
### Loading packages
library(tidyverse)
library(ggResidpanel)
## Load data
chips <- read.table('http://www.isi-stats.com/isi2/data/MeltingTimesUnstacked.txt', header = TRUE,
stringsAsFactors = TRUE)
head(chips)
```{r}
library(readxl)
library(tidyverse)
library(dplyr)
library(aod)
library(ggplot2)
df = read_csv('epidemicdata.csv')
```
```{r}
df = read_csv('epidemicdata.csv')
```
knitr::opts_chunk$set(echo = TRUE)
### Loading packages
library(tidyverse)
library(ggResidpanel)
## Load data
df = read_csv('epidemic.csv', header = TRUE,
stringsAsFactors = TRUE)
### Loading packages
library(tidyverse)
library(ggResidpanel)
## Load data
df = read_csv('epidemic.csv')
### Loading packages
library(tidyverse)
library(ggResidpanel)
## Load data
df = read_csv('epidemicdata.csv')
head(df)
### Loading packages
library(tidyverse)
library(ggResidpanel)
## Load data
df = read_csv('epidemicdata.csv')
### Loading packages
library(tidyverse)
library(ggResidpanel)
## Load data
df = read_csv('epidemicdata.csv')
### Loading packages
library(tidyverse)
library(ggResidpanel)
## Load data
df = read_csv('epidemicdata.csv')
head(df)
### Loading packages
library(tidyverse)
library(ggResidpanel)
library(ggplot2)
## Load data
df = read_csv('epidemicdata.csv')
### Loading packages
library(tidyverse)
library(ggResidpanel)
library(ggplot2)
## Load data
df = read_csv('epidemicdata.csv')
View(df)
View(df)
### Loading packages
library(tidyverse)
library(ggResidpanel)
library(ggplot2)
## Load data
df = read_csv('epidemicdata.csv')
df$percentDestroyed = df$Destroyed/df$Count
### Loading packages
library(tidyverse)
library(ggResidpanel)
library(ggplot2)
## Load data
df = read_csv('epidemicdata.csv')
df$percentDestroyed = df$Destroyed/df$Count
ggplot(df, mapping = aes(df$Medicine,df$percentDestroyed))
### Loading packages
library(tidyverse)
library(ggResidpanel)
library(ggplot2)
## Load data
df = read_csv('epidemicdata.csv')
df$percentDestroyed = df$Destroyed/df$Count
ggplot(df, mapping = aes(Medicine,percentDestroyed))
### Loading packages
library(tidyverse)
library(ggResidpanel)
library(ggplot2)
## Load data
df = read_csv('epidemicdata.csv')
df$percentDestroyed = df$Destroyed/df$Count
ggplot(df, mapping = aes(Medicine,percentDestroyed)) + geom_point()
plot.data <- df %>%
group_by(Medicine, Virus) %>%
summarise(Mean = mean(percentDestroyed))
plot.data %>% ggplot() + aes(x=Medicine, y = Mean, group=Virus, color=Virus) +
geom_line() + geom_point()
as.factor(Location)
df[Location] <- lapply(df[Location] , factor)
df$Location<- lapply(df$Location , factor)
plot.data <- df %>%
group_by(Medicine, Location) %>%
summarise(Mean = mean(percentDestroyed))
plot.data %>% ggplot() + aes(x=Medicine, y = Mean, group=Location, color=Location) +
geom_line() + geom_point()
plot.data <- df %>%
group_by(Medicine, Location) %>%
summarise(Mean = mean(percentDestroyed))
plot.data %>% ggplot() + aes(x=Medicine, y = Mean, group=Location, color=Location) +
geom_line() + geom_point()
plot.data <- df %>%
group_by(Location) %>%
summarise(Mean = mean(percentDestroyed))
plot.data %>% ggplot() + aes(x=Location, y = Mean, group=Location, color=Location) +
geom_line() + geom_point()
plot.data <- df %>%
group_by(Location) %>%
summarise(Mean = mean(percentDestroyed))
plot.data %>% ggplot() + aes(x=Location, y = Mean) +
geom_line() + geom_point()
plot.data <- df %>%
group_by(Location) %>%
summarise(Mean = mean(percentDestroyed))
plot.data %>% ggplot() + aes(x=Location, y = Mean)
### Loading packages
library(tidyverse)
library(ggResidpanel)
library(ggplot2)
## Load data
df = read_csv('epidemicdata.csv')
df$percentDestroyed = df$Destroyed/df$Count
ggplot(df, mapping = aes(Medicine,percentDestroyed)) + geom_point()
plot.data <- df %>%
group_by(Medicine, Virus) %>%
summarise(Mean = mean(percentDestroyed))
plot.data %>% ggplot() + aes(x=Medicine, y = Mean, group=Virus, color=Virus) +
geom_line() + geom_point()
plot.data <- df %>%
group_by(Location) %>%
summarise(Mean = mean(percentDestroyed))
plot.data %>% ggplot() + aes(x=Location, y = Mean)
```{r message=FALSE, warning=FALSE}
plot.data <- df %>%
group_by(Location) %>%
summarise(Mean = mean(percentDestroyed))
plot.data %>% ggplot() + aes(x=Location, y = Mean, group=Location, color=Location) +
geom_line() + geom_point()
```{r message=FALSE, warning=FALSE}
plot.data <- df %>%
group_by(Location, Virus) %>%
summarise(Mean = mean(percentDestroyed))
plot.data %>% ggplot() + aes(x=Location, y = Mean, group=Virus, color=Virus) +
geom_line() + geom_point()
plot.data <- df %>%
group_by(Location, Virus) %>%
summarise(Mean = mean(percentDestroyed))
plot.data %>% ggplot() + aes(x=Location, y = Mean, group=Virus, color=Virus) +
geom_line() + geom_point()
fit = lm(percentDestroyed ~ Location + Medicine, data = df)
fit = lm(percentDestroyed ~ Location + Medicine, data = df)
summary(fit)
fit = lm(percentDestroyed ~ Location + Medicine, data = df)
summary(fit)
aov(fit)
fit = lm(percentDestroyed ~ Location + Medicine, data = df)
summary(fit)
summar(aov(fit))
fit = lm(percentDestroyed ~ Location + Medicine, data = df)
summary(fit)
summary(aov(fit))
library(tidyverse)
## Load data
pancake.dat <-read_csv('Pancakes.csv')
#glimpse(pancake.dat)
## Change Time and Temperature variables into factors
cols = c('Temperature','Time')
pancake.dat[cols] = lapply(pancake.dat[cols], factor)
combination.means = pancake.dat %>%
group_by(Time, Temperature) %>%
summarise(rating_mean=(mean(Rating)), group_count =length(Rating))
combination.means
two_model = lm(Rating ~ Temperature + Time, data = pancake.dat)
summary(two_model)
two_model = lm(Rating ~ Temperature + Time, data = pancake.dat)
summary(two_model)
anova(two_model)
Temperature.Variation = 4.687/36.771
Time.Variation = 1.021/36.771
anova(two_model)
Temperature.Variation = 4.687/36.771
Time.Variation = 1.021/36.771
Temperature.Variation
Time.Variation
plot.data <- pancake.dat %>%
group_by(Time, Temperature) %>%
summarise(Mean = mean(Rating))
plot.data %>% ggplot() + aes(x=Time, y = Rating, group=Temperature, color=Temperature) +
geom_line() + geom_point()
View(pancake.dat)
View(pancake.dat)
plot.data <- pancake.dat %>%
group_by(Time, Temperature) %>%
summarise(Mean = mean(Rating))
plot.data %>% ggplot() + aes(x=Time, y = Rating, group=Temperature, color=Temperature) +
geom_line() + geom_point()
plot.data <- pancake.dat %>%
group_by(Time, Temperature) %>%
summarise(Mean = mean(Rating))
plot.data %>% ggplot(aes(x=Time, y = Rating, group=Temperature, color=Temperature))+
geom_line() + geom_point()
plot.data <- pancake.dat %>%
group_by(Time, Temperature) %>%
summarise(Mean = mean(Rating))
plot.data
plot.data <- pancake.dat %>%
group_by(Time, Temperature) %>%
summarise(Mean = mean(Rating))
plot.data %>% ggplot() + aes(x=Factor1, y = Mean, group=Factor2, color=Factor2) +
geom_line() + geom_point()
plot.data <- pancake.dat %>%
group_by(Time, Temperature) %>%
summarise(Mean = mean(Rating))
plot.data
plot.data %>% ggplot() + aes(x=Time, y = Mean, group=Temperature, color=Temperature) +
geom_line() + geom_point()
plot.data <- pancake.dat %>%
group_by(Time, Temperature) %>%
summarise(Mean = mean(Rating))
plot.data %>% ggplot() + aes(x=Time, y = Mean, group=Temperature, color=Temperature) +
geom_line() + geom_point()
interaction.model = lm(Rating~ Time*Temperature)
interaction.model = lm(Rating~ Time*Temperature, data = pancake.dat)
interaction.model = lm(Rating~ Time*Temperature, data = pancake.dat)
summary(interaction.model)
interaction.model = lm(Rating~ Time*Temperature, data = pancake.dat)
summary(interaction.model)
interaction.model(2,6)
interaction.model %>% predict(2,6)
interaction.model %>% predict(c(2,6))
interaction.model %>% predict(2,6)
q()
shiny::runApp('WIlliamSonoma')
update.packages()
package.update("htmltools")
update.packages("htmltools")
update.packages("htmltools")
shiny::runApp('WIlliamSonoma')
update.packages()
shiny::runApp('WIlliamSonoma')
install.packages(c("digest", "htmltools", "rlang"))
install.packages(c("cluster", "MASS", "Matrix", "mgcv", "nlme", "survival"), lib="C:/Program Files/R/R-4.1.3/library")
shiny::runApp('WIlliamSonoma')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
exit9)
exit()
end
runApp('WIlliamSonoma')
runApp()
runApp()
runApp()
runApp('WIlliamSonoma')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('WIlliamSonoma')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('WIlliamSonoma')
runApp('WIlliamSonoma')
runApp()
runApp('WIlliamSonoma')
runApp()
runApp('WIlliamSonoma')
runApp('WIlliamSonoma')
runApp('WIlliamSonoma')
runApp('WIlliamSonoma')
runApp('WIlliamSonoma')
shiny::runApp('C:/Users/oscar/Desktop/Job Prep/William Sonoma')
runApp('C:/Users/oscar/Desktop/Job Prep/William Sonoma')
shiny::runApp('C:/Users/oscar/Desktop/Job Prep/William Sonoma')
runApp('C:/Users/oscar/Desktop/Job Prep/William Sonoma')
shiny::runApp('C:/Users/oscar/Desktop/Job Prep/William Sonoma')
shiny::runApp('C:/Users/oscar/Desktop/Job Prep/William Sonoma')
runApp('C:/Users/oscar/Desktop/Job Prep/William Sonoma')
